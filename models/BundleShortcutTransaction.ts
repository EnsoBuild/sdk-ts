/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActionToBundle } from './ActionToBundle';
import {
    ActionToBundleFromJSON,
    ActionToBundleFromJSONTyped,
    ActionToBundleToJSON,
    ActionToBundleToJSONTyped,
} from './ActionToBundle';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
    TransactionToJSONTyped,
} from './Transaction';
import type { Hop } from './Hop';
import {
    HopFromJSON,
    HopFromJSONTyped,
    HopToJSON,
    HopToJSONTyped,
} from './Hop';

/**
 * 
 * @export
 * @interface BundleShortcutTransaction
 */
export interface BundleShortcutTransaction {
    /**
     * 
     * @type {Array<ActionToBundle>}
     * @memberof BundleShortcutTransaction
     */
    bundle: Array<ActionToBundle>;
    /**
     * 
     * @type {string}
     * @memberof BundleShortcutTransaction
     */
    gas: string;
    /**
     * 
     * @type {object}
     * @memberof BundleShortcutTransaction
     */
    amountsOut: object;
    /**
     * The route the shortcut will use
     * @type {Array<Hop>}
     * @memberof BundleShortcutTransaction
     */
    route?: Array<Hop>;
    /**
     * Block number the transaction was created on
     * @type {number}
     * @memberof BundleShortcutTransaction
     */
    createdAt: number;
    /**
     * The tx object to use in `ethers`
     * @type {Transaction}
     * @memberof BundleShortcutTransaction
     */
    tx: Transaction;
}

/**
 * Check if a given object implements the BundleShortcutTransaction interface.
 */
export function instanceOfBundleShortcutTransaction(value: object): value is BundleShortcutTransaction {
    if (!('bundle' in value) || value['bundle'] === undefined) return false;
    if (!('gas' in value) || value['gas'] === undefined) return false;
    if (!('amountsOut' in value) || value['amountsOut'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('tx' in value) || value['tx'] === undefined) return false;
    return true;
}

export function BundleShortcutTransactionFromJSON(json: any): BundleShortcutTransaction {
    return BundleShortcutTransactionFromJSONTyped(json, false);
}

export function BundleShortcutTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): BundleShortcutTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'bundle': ((json['bundle'] as Array<any>).map(ActionToBundleFromJSON)),
        'gas': json['gas'],
        'amountsOut': json['amountsOut'],
        'route': json['route'] == null ? undefined : ((json['route'] as Array<any>).map(HopFromJSON)),
        'createdAt': json['createdAt'],
        'tx': TransactionFromJSON(json['tx']),
    };
}

export function BundleShortcutTransactionToJSON(json: any): BundleShortcutTransaction {
    return BundleShortcutTransactionToJSONTyped(json, false);
}

export function BundleShortcutTransactionToJSONTyped(value?: BundleShortcutTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bundle': ((value['bundle'] as Array<any>).map(ActionToBundleToJSON)),
        'gas': value['gas'],
        'amountsOut': value['amountsOut'],
        'route': value['route'] == null ? undefined : ((value['route'] as Array<any>).map(HopToJSON)),
        'createdAt': value['createdAt'],
        'tx': TransactionToJSON(value['tx']),
    };
}

