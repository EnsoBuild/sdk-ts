/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TokenModel } from './TokenModel';
import {
    TokenModelFromJSON,
    TokenModelFromJSONTyped,
    TokenModelToJSON,
    TokenModelToJSONTyped,
} from './TokenModel';

/**
 * 
 * @export
 * @interface PositionModel
 */
export interface PositionModel {
    /**
     * Ethereum address of the token
     * @type {string}
     * @memberof PositionModel
     */
    address: string;
    /**
     * Chain ID of the network of the token
     * @type {number}
     * @memberof PositionModel
     */
    chainId: number;
    /**
     * Type of token
     * @type {string}
     * @memberof PositionModel
     */
    type: string;
    /**
     * Token decimals
     * @type {number}
     * @memberof PositionModel
     */
    decimals: number;
    /**
     * Token name
     * @type {string}
     * @memberof PositionModel
     */
    symbol: string | null;
    /**
     * Token symbol
     * @type {string}
     * @memberof PositionModel
     */
    name: string | null;
    /**
     * A list of logos for the token
     * @type {Array<string>}
     * @memberof PositionModel
     */
    logosUri: Array<string> | null;
    /**
     * Underlying tokens of defi token
     * @type {Array<TokenModel>}
     * @memberof PositionModel
     */
    underlyingTokens: Array<TokenModel> | null;
    /**
     * The overarching project or platform associated with the DeFi token
     * @type {string}
     * @memberof PositionModel
     */
    project: string | null;
    /**
     * The specific standard integration or version of the DeFi project
     * @type {string}
     * @memberof PositionModel
     */
    protocolSlug: string | null;
    /**
     * The defi position APY
     * @type {number}
     * @memberof PositionModel
     */
    apy: number | null;
    /**
     * The defi position base APY
     * @type {number}
     * @memberof PositionModel
     */
    apyBase: number | null;
    /**
     * The defi position reward APY
     * @type {number}
     * @memberof PositionModel
     */
    apyReward: number | null;
    /**
     * The defi position TVL
     * @type {number}
     * @memberof PositionModel
     */
    tvl: number | null;
    /**
     * Ethereum address for contract interaction of defi token
     * @type {string}
     * @memberof PositionModel
     */
    primaryAddress: string | null;
}

/**
 * Check if a given object implements the PositionModel interface.
 */
export function instanceOfPositionModel(value: object): value is PositionModel {
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('chainId' in value) || value['chainId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('decimals' in value) || value['decimals'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('logosUri' in value) || value['logosUri'] === undefined) return false;
    if (!('underlyingTokens' in value) || value['underlyingTokens'] === undefined) return false;
    if (!('project' in value) || value['project'] === undefined) return false;
    if (!('protocolSlug' in value) || value['protocolSlug'] === undefined) return false;
    if (!('apy' in value) || value['apy'] === undefined) return false;
    if (!('apyBase' in value) || value['apyBase'] === undefined) return false;
    if (!('apyReward' in value) || value['apyReward'] === undefined) return false;
    if (!('tvl' in value) || value['tvl'] === undefined) return false;
    if (!('primaryAddress' in value) || value['primaryAddress'] === undefined) return false;
    return true;
}

export function PositionModelFromJSON(json: any): PositionModel {
    return PositionModelFromJSONTyped(json, false);
}

export function PositionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PositionModel {
    if (json == null) {
        return json;
    }
    return {
        
        'address': json['address'],
        'chainId': json['chainId'],
        'type': json['type'],
        'decimals': json['decimals'],
        'symbol': json['symbol'],
        'name': json['name'],
        'logosUri': json['logosUri'] == null ? null : json['logosUri'],
        'underlyingTokens': (json['underlyingTokens'] == null ? null : (json['underlyingTokens'] as Array<any>).map(TokenModelFromJSON)),
        'project': json['project'],
        'protocolSlug': json['protocolSlug'],
        'apy': json['apy'],
        'apyBase': json['apyBase'],
        'apyReward': json['apyReward'],
        'tvl': json['tvl'],
        'primaryAddress': json['primaryAddress'],
    };
}

export function PositionModelToJSON(json: any): PositionModel {
    return PositionModelToJSONTyped(json, false);
}

export function PositionModelToJSONTyped(value?: PositionModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'address': value['address'],
        'chainId': value['chainId'],
        'type': value['type'],
        'decimals': value['decimals'],
        'symbol': value['symbol'],
        'name': value['name'],
        'logosUri': value['logosUri'],
        'underlyingTokens': (value['underlyingTokens'] == null ? null : (value['underlyingTokens'] as Array<any>).map(TokenModelToJSON)),
        'project': value['project'],
        'protocolSlug': value['protocolSlug'],
        'apy': value['apy'],
        'apyBase': value['apyBase'],
        'apyReward': value['apyReward'],
        'tvl': value['tvl'],
        'primaryAddress': value['primaryAddress'],
    };
}

