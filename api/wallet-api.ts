/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { WalletApproveTransaction } from '../model';
// @ts-ignore
import type { WalletBalance } from '../model';
/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns transaction that approves your EnsoWallet to spend tokens
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {string} tokenAddress ERC20 token address of the token to approve
         * @param {string} amount Amount of tokens to approve in wei
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {CreateApproveTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApproveTransaction: async (fromAddress: string, tokenAddress: string, amount: string, chainId?: number, routingStrategy?: CreateApproveTransactionRoutingStrategyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAddress' is not null or undefined
            assertParamExists('createApproveTransaction', 'fromAddress', fromAddress)
            // verify required parameter 'tokenAddress' is not null or undefined
            assertParamExists('createApproveTransaction', 'tokenAddress', tokenAddress)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('createApproveTransaction', 'amount', amount)
            const localVarPath = `/api/v1/wallet/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (fromAddress !== undefined) {
                localVarQueryParameter['fromAddress'] = fromAddress;
            }

            if (routingStrategy !== undefined) {
                localVarQueryParameter['routingStrategy'] = routingStrategy;
            }

            if (tokenAddress !== undefined) {
                localVarQueryParameter['tokenAddress'] = tokenAddress;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all balances for a given wallet
         * @param {string} eoaAddress Address of the eoa with which to associate the ensoWallet for balances
         * @param {boolean} useEoa If true returns balances for the provided eoaAddress, instead of the associated ensoWallet
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBalances: async (eoaAddress: string, useEoa: boolean, chainId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eoaAddress' is not null or undefined
            assertParamExists('walletBalances', 'eoaAddress', eoaAddress)
            // verify required parameter 'useEoa' is not null or undefined
            assertParamExists('walletBalances', 'useEoa', useEoa)
            const localVarPath = `/api/v1/wallet/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (eoaAddress !== undefined) {
                localVarQueryParameter['eoaAddress'] = eoaAddress;
            }

            if (useEoa !== undefined) {
                localVarQueryParameter['useEoa'] = useEoa;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns transaction that approves your EnsoWallet to spend tokens
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {string} tokenAddress ERC20 token address of the token to approve
         * @param {string} amount Amount of tokens to approve in wei
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {CreateApproveTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApproveTransaction(fromAddress: string, tokenAddress: string, amount: string, chainId?: number, routingStrategy?: CreateApproveTransactionRoutingStrategyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletApproveTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApproveTransaction(fromAddress, tokenAddress, amount, chainId, routingStrategy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.createApproveTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns all balances for a given wallet
         * @param {string} eoaAddress Address of the eoa with which to associate the ensoWallet for balances
         * @param {boolean} useEoa If true returns balances for the provided eoaAddress, instead of the associated ensoWallet
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletBalances(eoaAddress: string, useEoa: boolean, chainId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletBalance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletBalances(eoaAddress, useEoa, chainId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletBalances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns transaction that approves your EnsoWallet to spend tokens
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {string} tokenAddress ERC20 token address of the token to approve
         * @param {string} amount Amount of tokens to approve in wei
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {CreateApproveTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApproveTransaction(fromAddress: string, tokenAddress: string, amount: string, chainId?: number, routingStrategy?: CreateApproveTransactionRoutingStrategyEnum, options?: RawAxiosRequestConfig): AxiosPromise<WalletApproveTransaction> {
            return localVarFp.createApproveTransaction(fromAddress, tokenAddress, amount, chainId, routingStrategy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all balances for a given wallet
         * @param {string} eoaAddress Address of the eoa with which to associate the ensoWallet for balances
         * @param {boolean} useEoa If true returns balances for the provided eoaAddress, instead of the associated ensoWallet
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBalances(eoaAddress: string, useEoa: boolean, chainId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletBalance>> {
            return localVarFp.walletBalances(eoaAddress, useEoa, chainId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * 
     * @summary Returns transaction that approves your EnsoWallet to spend tokens
     * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
     * @param {string} tokenAddress ERC20 token address of the token to approve
     * @param {string} amount Amount of tokens to approve in wei
     * @param {number} [chainId] Chain ID of the network to execute the transaction on
     * @param {CreateApproveTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createApproveTransaction(fromAddress: string, tokenAddress: string, amount: string, chainId?: number, routingStrategy?: CreateApproveTransactionRoutingStrategyEnum, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).createApproveTransaction(fromAddress, tokenAddress, amount, chainId, routingStrategy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all balances for a given wallet
     * @param {string} eoaAddress Address of the eoa with which to associate the ensoWallet for balances
     * @param {boolean} useEoa If true returns balances for the provided eoaAddress, instead of the associated ensoWallet
     * @param {number} [chainId] Chain ID of the network to execute the transaction on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletBalances(eoaAddress: string, useEoa: boolean, chainId?: number, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletBalances(eoaAddress, useEoa, chainId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreateApproveTransactionRoutingStrategyEnum = {
    Ensowallet: 'ensowallet',
    Router: 'router',
    Delegate: 'delegate',
    RouterLegacy: 'router-legacy',
    DelegateLegacy: 'delegate-legacy'
} as const;
export type CreateApproveTransactionRoutingStrategyEnum = typeof CreateApproveTransactionRoutingStrategyEnum[keyof typeof CreateApproveTransactionRoutingStrategyEnum];
