/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConnectedNetwork } from '../model';
// @ts-ignore
import type { NontokenizedPositions200Response } from '../model';
// @ts-ignore
import type { Price } from '../model';
// @ts-ignore
import type { ProtocolModel } from '../model';
// @ts-ignore
import type { Tokens200Response } from '../model';
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns aggregators supported by the API (can be controled via disableAggregators param)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregators: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/aggregators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns projects and relevant protocols available to use
         * @param {any} [chainId] Chain ID of the network to search for
         * @param {any} [slug] slug of the project to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProtocols: async (chainId?: any, slug?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/protocols`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                for (const [key, value] of Object.entries(chainId)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (slug !== undefined) {
                for (const [key, value] of Object.entries(slug)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns price for a token
         * @param {any} address Address of the token to search for
         * @param {any} chainId Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrice: async (address: any, chainId: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getPrice', 'address', address)
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('getPrice', 'chainId', chainId)
            const localVarPath = `/api/v1/prices/{chainId}/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"chainId"}}`, encodeURIComponent(String(chainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns price for multiple tokens
         * @param {number} chainId Chain ID of the network to search for
         * @param {Array<string>} addresses Ethereum address of the token to check price for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrices: async (chainId: number, addresses: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('getPrices', 'chainId', chainId)
            // verify required parameter 'addresses' is not null or undefined
            assertParamExists('getPrices', 'addresses', addresses)
            const localVarPath = `/api/v1/prices/{chainId}`
                .replace(`{${"chainId"}}`, encodeURIComponent(String(chainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (addresses) {
                localVarQueryParameter['addresses'] = addresses;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns chain USD volume and total transactions
         * @param {number} chainId Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVolume: async (chainId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('getVolume', 'chainId', chainId)
            const localVarPath = `/api/v1/volume/{chainId}`
                .replace(`{${"chainId"}}`, encodeURIComponent(String(chainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns networks supported by the API
         * @param {any} [name] Title of the network to search for
         * @param {any} [chainId] Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networks: async (name?: any, chainId?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/networks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                for (const [key, value] of Object.entries(name)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (chainId !== undefined) {
                for (const [key, value] of Object.entries(chainId)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns nontokenized positions and their details
         * @param {string} [project] The overarching project or platform associated with the DeFi token
         * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
         * @param {number} [chainId] Chain ID of the network of the nontokenized position
         * @param {Array<string>} [address] Ethereum addresses of the nontokenized positions
         * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of nontokenized position
         * @param {number} [page] Pagination page number. Pages are of length 1000
         * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nontokenizedPositions: async (project?: string, protocolSlug?: string, chainId?: number, address?: Array<string>, primaryAddress?: Array<string>, page?: number, cursor?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/nontokenized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (protocolSlug !== undefined) {
                localVarQueryParameter['protocolSlug'] = protocolSlug;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (address) {
                localVarQueryParameter['address'] = address;
            }

            if (primaryAddress) {
                localVarQueryParameter['primaryAddress'] = primaryAddress;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns tokens and their details
         * @param {string} [project] The overarching project or platform associated with the DeFi token
         * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
         * @param {Array<string>} [underlyingTokens] Underlying tokens of defi token
         * @param {Array<string>} [underlyingTokensExact] Exact composition of underlying tokens of defi token
         * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of defi tokens
         * @param {Array<string>} [address] Ethereum addresses of the tokens
         * @param {Array<string>} [name] Names of the tokens
         * @param {Array<string>} [symbol] Symbols of the tokens
         * @param {number} [chainId] Chain ID of the network of the token
         * @param {TokensTypeEnum} [type] Type of token.       If not provided, both types will be taken into account
         * @param {number} [page] Pagination page number. Pages are of length 1000
         * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
         * @param {boolean} [includeMetadata] Whether to include token metadata (symbol, name and logos)
         * @param {number} [apyFrom] Only include tokens with APY over this value
         * @param {number} [apyTo] Only include tokens with APY below this value
         * @param {number} [tvlFrom] Only include tokens with TVL over this value
         * @param {number} [tvlTo] Only include tokens with TVL below this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokens: async (project?: string, protocolSlug?: string, underlyingTokens?: Array<string>, underlyingTokensExact?: Array<string>, primaryAddress?: Array<string>, address?: Array<string>, name?: Array<string>, symbol?: Array<string>, chainId?: number, type?: TokensTypeEnum, page?: number, cursor?: number, includeMetadata?: boolean, apyFrom?: number, apyTo?: number, tvlFrom?: number, tvlTo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (protocolSlug !== undefined) {
                localVarQueryParameter['protocolSlug'] = protocolSlug;
            }

            if (underlyingTokens) {
                localVarQueryParameter['underlyingTokens'] = underlyingTokens;
            }

            if (underlyingTokensExact) {
                localVarQueryParameter['underlyingTokensExact'] = underlyingTokensExact;
            }

            if (primaryAddress) {
                localVarQueryParameter['primaryAddress'] = primaryAddress;
            }

            if (address) {
                localVarQueryParameter['address'] = address;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (symbol) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (includeMetadata !== undefined) {
                localVarQueryParameter['includeMetadata'] = includeMetadata;
            }

            if (apyFrom !== undefined) {
                localVarQueryParameter['apyFrom'] = apyFrom;
            }

            if (apyTo !== undefined) {
                localVarQueryParameter['apyTo'] = apyTo;
            }

            if (tvlFrom !== undefined) {
                localVarQueryParameter['tvlFrom'] = tvlFrom;
            }

            if (tvlTo !== undefined) {
                localVarQueryParameter['tvlTo'] = tvlTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns aggregators supported by the API (can be controled via disableAggregators param)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aggregators(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aggregators(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.aggregators']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns projects and relevant protocols available to use
         * @param {any} [chainId] Chain ID of the network to search for
         * @param {any} [slug] slug of the project to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllProtocols(chainId?: any, slug?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProtocolModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllProtocols(chainId, slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.findAllProtocols']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns price for a token
         * @param {any} address Address of the token to search for
         * @param {any} chainId Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrice(address: any, chainId: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrice(address, chainId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.getPrice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns price for multiple tokens
         * @param {number} chainId Chain ID of the network to search for
         * @param {Array<string>} addresses Ethereum address of the token to check price for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrices(chainId: number, addresses: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrices(chainId, addresses, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.getPrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns chain USD volume and total transactions
         * @param {number} chainId Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVolume(chainId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVolume(chainId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.getVolume']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns networks supported by the API
         * @param {any} [name] Title of the network to search for
         * @param {any} [chainId] Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networks(name?: any, chainId?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectedNetwork>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networks(name, chainId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.networks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns nontokenized positions and their details
         * @param {string} [project] The overarching project or platform associated with the DeFi token
         * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
         * @param {number} [chainId] Chain ID of the network of the nontokenized position
         * @param {Array<string>} [address] Ethereum addresses of the nontokenized positions
         * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of nontokenized position
         * @param {number} [page] Pagination page number. Pages are of length 1000
         * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nontokenizedPositions(project?: string, protocolSlug?: string, chainId?: number, address?: Array<string>, primaryAddress?: Array<string>, page?: number, cursor?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NontokenizedPositions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nontokenizedPositions(project, protocolSlug, chainId, address, primaryAddress, page, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.nontokenizedPositions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns tokens and their details
         * @param {string} [project] The overarching project or platform associated with the DeFi token
         * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
         * @param {Array<string>} [underlyingTokens] Underlying tokens of defi token
         * @param {Array<string>} [underlyingTokensExact] Exact composition of underlying tokens of defi token
         * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of defi tokens
         * @param {Array<string>} [address] Ethereum addresses of the tokens
         * @param {Array<string>} [name] Names of the tokens
         * @param {Array<string>} [symbol] Symbols of the tokens
         * @param {number} [chainId] Chain ID of the network of the token
         * @param {TokensTypeEnum} [type] Type of token.       If not provided, both types will be taken into account
         * @param {number} [page] Pagination page number. Pages are of length 1000
         * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
         * @param {boolean} [includeMetadata] Whether to include token metadata (symbol, name and logos)
         * @param {number} [apyFrom] Only include tokens with APY over this value
         * @param {number} [apyTo] Only include tokens with APY below this value
         * @param {number} [tvlFrom] Only include tokens with TVL over this value
         * @param {number} [tvlTo] Only include tokens with TVL below this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokens(project?: string, protocolSlug?: string, underlyingTokens?: Array<string>, underlyingTokensExact?: Array<string>, primaryAddress?: Array<string>, address?: Array<string>, name?: Array<string>, symbol?: Array<string>, chainId?: number, type?: TokensTypeEnum, page?: number, cursor?: number, includeMetadata?: boolean, apyFrom?: number, apyTo?: number, tvlFrom?: number, tvlTo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tokens200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokens(project, protocolSlug, underlyingTokens, underlyingTokensExact, primaryAddress, address, name, symbol, chainId, type, page, cursor, includeMetadata, apyFrom, apyTo, tvlFrom, tvlTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.tokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns aggregators supported by the API (can be controled via disableAggregators param)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregators(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.aggregators(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns projects and relevant protocols available to use
         * @param {any} [chainId] Chain ID of the network to search for
         * @param {any} [slug] slug of the project to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProtocols(chainId?: any, slug?: any, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProtocolModel>> {
            return localVarFp.findAllProtocols(chainId, slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns price for a token
         * @param {any} address Address of the token to search for
         * @param {any} chainId Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrice(address: any, chainId: any, options?: RawAxiosRequestConfig): AxiosPromise<Price> {
            return localVarFp.getPrice(address, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns price for multiple tokens
         * @param {number} chainId Chain ID of the network to search for
         * @param {Array<string>} addresses Ethereum address of the token to check price for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrices(chainId: number, addresses: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Price>> {
            return localVarFp.getPrices(chainId, addresses, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns chain USD volume and total transactions
         * @param {number} chainId Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVolume(chainId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getVolume(chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns networks supported by the API
         * @param {any} [name] Title of the network to search for
         * @param {any} [chainId] Chain ID of the network to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networks(name?: any, chainId?: any, options?: RawAxiosRequestConfig): AxiosPromise<Array<ConnectedNetwork>> {
            return localVarFp.networks(name, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns nontokenized positions and their details
         * @param {string} [project] The overarching project or platform associated with the DeFi token
         * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
         * @param {number} [chainId] Chain ID of the network of the nontokenized position
         * @param {Array<string>} [address] Ethereum addresses of the nontokenized positions
         * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of nontokenized position
         * @param {number} [page] Pagination page number. Pages are of length 1000
         * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nontokenizedPositions(project?: string, protocolSlug?: string, chainId?: number, address?: Array<string>, primaryAddress?: Array<string>, page?: number, cursor?: number, options?: RawAxiosRequestConfig): AxiosPromise<NontokenizedPositions200Response> {
            return localVarFp.nontokenizedPositions(project, protocolSlug, chainId, address, primaryAddress, page, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns tokens and their details
         * @param {string} [project] The overarching project or platform associated with the DeFi token
         * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
         * @param {Array<string>} [underlyingTokens] Underlying tokens of defi token
         * @param {Array<string>} [underlyingTokensExact] Exact composition of underlying tokens of defi token
         * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of defi tokens
         * @param {Array<string>} [address] Ethereum addresses of the tokens
         * @param {Array<string>} [name] Names of the tokens
         * @param {Array<string>} [symbol] Symbols of the tokens
         * @param {number} [chainId] Chain ID of the network of the token
         * @param {TokensTypeEnum} [type] Type of token.       If not provided, both types will be taken into account
         * @param {number} [page] Pagination page number. Pages are of length 1000
         * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
         * @param {boolean} [includeMetadata] Whether to include token metadata (symbol, name and logos)
         * @param {number} [apyFrom] Only include tokens with APY over this value
         * @param {number} [apyTo] Only include tokens with APY below this value
         * @param {number} [tvlFrom] Only include tokens with TVL over this value
         * @param {number} [tvlTo] Only include tokens with TVL below this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokens(project?: string, protocolSlug?: string, underlyingTokens?: Array<string>, underlyingTokensExact?: Array<string>, primaryAddress?: Array<string>, address?: Array<string>, name?: Array<string>, symbol?: Array<string>, chainId?: number, type?: TokensTypeEnum, page?: number, cursor?: number, includeMetadata?: boolean, apyFrom?: number, apyTo?: number, tvlFrom?: number, tvlTo?: number, options?: RawAxiosRequestConfig): AxiosPromise<Tokens200Response> {
            return localVarFp.tokens(project, protocolSlug, underlyingTokens, underlyingTokensExact, primaryAddress, address, name, symbol, chainId, type, page, cursor, includeMetadata, apyFrom, apyTo, tvlFrom, tvlTo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI {
    /**
     * 
     * @summary Returns aggregators supported by the API (can be controled via disableAggregators param)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public aggregators(options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).aggregators(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns projects and relevant protocols available to use
     * @param {any} [chainId] Chain ID of the network to search for
     * @param {any} [slug] slug of the project to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public findAllProtocols(chainId?: any, slug?: any, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).findAllProtocols(chainId, slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns price for a token
     * @param {any} address Address of the token to search for
     * @param {any} chainId Chain ID of the network to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public getPrice(address: any, chainId: any, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getPrice(address, chainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns price for multiple tokens
     * @param {number} chainId Chain ID of the network to search for
     * @param {Array<string>} addresses Ethereum address of the token to check price for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public getPrices(chainId: number, addresses: Array<string>, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getPrices(chainId, addresses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns chain USD volume and total transactions
     * @param {number} chainId Chain ID of the network to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public getVolume(chainId: number, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getVolume(chainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns networks supported by the API
     * @param {any} [name] Title of the network to search for
     * @param {any} [chainId] Chain ID of the network to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public networks(name?: any, chainId?: any, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).networks(name, chainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns nontokenized positions and their details
     * @param {string} [project] The overarching project or platform associated with the DeFi token
     * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
     * @param {number} [chainId] Chain ID of the network of the nontokenized position
     * @param {Array<string>} [address] Ethereum addresses of the nontokenized positions
     * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of nontokenized position
     * @param {number} [page] Pagination page number. Pages are of length 1000
     * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public nontokenizedPositions(project?: string, protocolSlug?: string, chainId?: number, address?: Array<string>, primaryAddress?: Array<string>, page?: number, cursor?: number, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).nontokenizedPositions(project, protocolSlug, chainId, address, primaryAddress, page, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns tokens and their details
     * @param {string} [project] The overarching project or platform associated with the DeFi token
     * @param {string} [protocolSlug] The specific standard integration or version of the DeFi project
     * @param {Array<string>} [underlyingTokens] Underlying tokens of defi token
     * @param {Array<string>} [underlyingTokensExact] Exact composition of underlying tokens of defi token
     * @param {Array<string>} [primaryAddress] Ethereum addresses for contract interaction of defi tokens
     * @param {Array<string>} [address] Ethereum addresses of the tokens
     * @param {Array<string>} [name] Names of the tokens
     * @param {Array<string>} [symbol] Symbols of the tokens
     * @param {number} [chainId] Chain ID of the network of the token
     * @param {TokensTypeEnum} [type] Type of token.       If not provided, both types will be taken into account
     * @param {number} [page] Pagination page number. Pages are of length 1000
     * @param {number} [cursor] Cursor for pagination. Pages are of length 1000
     * @param {boolean} [includeMetadata] Whether to include token metadata (symbol, name and logos)
     * @param {number} [apyFrom] Only include tokens with APY over this value
     * @param {number} [apyTo] Only include tokens with APY below this value
     * @param {number} [tvlFrom] Only include tokens with TVL over this value
     * @param {number} [tvlTo] Only include tokens with TVL below this value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public tokens(project?: string, protocolSlug?: string, underlyingTokens?: Array<string>, underlyingTokensExact?: Array<string>, primaryAddress?: Array<string>, address?: Array<string>, name?: Array<string>, symbol?: Array<string>, chainId?: number, type?: TokensTypeEnum, page?: number, cursor?: number, includeMetadata?: boolean, apyFrom?: number, apyTo?: number, tvlFrom?: number, tvlTo?: number, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).tokens(project, protocolSlug, underlyingTokens, underlyingTokensExact, primaryAddress, address, name, symbol, chainId, type, page, cursor, includeMetadata, apyFrom, apyTo, tvlFrom, tvlTo, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TokensTypeEnum = {
    Defi: 'defi',
    Base: 'base'
} as const;
export type TokensTypeEnum = typeof TokensTypeEnum[keyof typeof TokensTypeEnum];
