/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Action } from '../model';
// @ts-ignore
import type { ProtocolModel } from '../model';
// @ts-ignore
import type { Standard } from '../model';
/**
 * StandardsApi - axios parameter creator
 * @export
 */
export const StandardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns actions available to use in bundle shortcuts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllActions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns actions available to use in bundle shortcuts for a given protocol
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionsBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getActionsBySlug', 'slug', slug)
            const localVarPath = `/api/v1/actions/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a standard by slug
         * @param {string} slug The protocol slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtocolBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getProtocolBySlug', 'slug', slug)
            const localVarPath = `/api/v1/standards/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns standards and methods available to use in bundle shortcuts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/standards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StandardsApi - functional programming interface
 * @export
 */
export const StandardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StandardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns actions available to use in bundle shortcuts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllActions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Action>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllActions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StandardsApi.findAllActions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns actions available to use in bundle shortcuts for a given protocol
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActionsBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Action>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActionsBySlug(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StandardsApi.getActionsBySlug']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a standard by slug
         * @param {string} slug The protocol slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProtocolBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProtocolModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProtocolBySlug(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StandardsApi.getProtocolBySlug']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns standards and methods available to use in bundle shortcuts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async standards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Standard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.standards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StandardsApi.standards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StandardsApi - factory interface
 * @export
 */
export const StandardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StandardsApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns actions available to use in bundle shortcuts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllActions(options?: RawAxiosRequestConfig): AxiosPromise<Array<Action>> {
            return localVarFp.findAllActions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns actions available to use in bundle shortcuts for a given protocol
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionsBySlug(slug: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Action>> {
            return localVarFp.getActionsBySlug(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a standard by slug
         * @param {string} slug The protocol slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtocolBySlug(slug: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProtocolModel>> {
            return localVarFp.getProtocolBySlug(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns standards and methods available to use in bundle shortcuts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standards(options?: RawAxiosRequestConfig): AxiosPromise<Array<Standard>> {
            return localVarFp.standards(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StandardsApi - object-oriented interface
 * @export
 * @class StandardsApi
 * @extends {BaseAPI}
 */
export class StandardsApi extends BaseAPI {
    /**
     * 
     * @summary Returns actions available to use in bundle shortcuts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardsApi
     */
    public findAllActions(options?: RawAxiosRequestConfig) {
        return StandardsApiFp(this.configuration).findAllActions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns actions available to use in bundle shortcuts for a given protocol
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardsApi
     */
    public getActionsBySlug(slug: string, options?: RawAxiosRequestConfig) {
        return StandardsApiFp(this.configuration).getActionsBySlug(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a standard by slug
     * @param {string} slug The protocol slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardsApi
     */
    public getProtocolBySlug(slug: string, options?: RawAxiosRequestConfig) {
        return StandardsApiFp(this.configuration).getProtocolBySlug(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns standards and methods available to use in bundle shortcuts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandardsApi
     */
    public standards(options?: RawAxiosRequestConfig) {
        return StandardsApiFp(this.configuration).standards(options).then((request) => request(this.axios, this.basePath));
    }
}

