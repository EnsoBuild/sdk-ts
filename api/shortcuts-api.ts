/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ActionToBundle } from '../model';
// @ts-ignore
import type { BundleShortcutTransaction } from '../model';
// @ts-ignore
import type { IporShortcutInput } from '../model';
// @ts-ignore
import type { IporShortcutTransaction } from '../model';
// @ts-ignore
import type { RouteShortcutTransaction } from '../model';
// @ts-ignore
import type { RouteShortcutVariableInputs } from '../model';
/**
 * ShortcutsApi - axios parameter creator
 * @export
 */
export const ShortcutsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bundle a list of actions into a single tx
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<ActionToBundle>} actionToBundle 
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {BundleShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleShortcutTransaction: async (fromAddress: string, actionToBundle: Array<ActionToBundle>, chainId?: number, referralCode?: string, routingStrategy?: BundleShortcutTransactionRoutingStrategyEnum, receiver?: string, spender?: string, ignoreAggregators?: Array<string> | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAddress' is not null or undefined
            assertParamExists('bundleShortcutTransaction', 'fromAddress', fromAddress)
            // verify required parameter 'actionToBundle' is not null or undefined
            assertParamExists('bundleShortcutTransaction', 'actionToBundle', actionToBundle)
            const localVarPath = `/api/v1/shortcuts/bundle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (fromAddress !== undefined) {
                localVarQueryParameter['fromAddress'] = fromAddress;
            }

            if (referralCode !== undefined) {
                localVarQueryParameter['referralCode'] = referralCode;
            }

            if (routingStrategy !== undefined) {
                localVarQueryParameter['routingStrategy'] = routingStrategy;
            }

            if (receiver !== undefined) {
                localVarQueryParameter['receiver'] = receiver;
            }

            if (spender !== undefined) {
                localVarQueryParameter['spender'] = spender;
            }

            if (ignoreAggregators) {
                localVarQueryParameter['ignoreAggregators'] = ignoreAggregators;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(actionToBundle, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get transaction for IPOR shortcut
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {IporShortcutInput} iporShortcutInput 
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iporShortcutTransaction: async (fromAddress: string, iporShortcutInput: IporShortcutInput, chainId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAddress' is not null or undefined
            assertParamExists('iporShortcutTransaction', 'fromAddress', fromAddress)
            // verify required parameter 'iporShortcutInput' is not null or undefined
            assertParamExists('iporShortcutTransaction', 'iporShortcutInput', iporShortcutInput)
            const localVarPath = `/api/v1/shortcuts/static/ipor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (fromAddress !== undefined) {
                localVarQueryParameter['fromAddress'] = fromAddress;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iporShortcutInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Best route from a token to another
         * @param {RouteShortcutVariableInputs} routeShortcutVariableInputs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRouteShortcutTransaction: async (routeShortcutVariableInputs: RouteShortcutVariableInputs, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeShortcutVariableInputs' is not null or undefined
            assertParamExists('postRouteShortcutTransaction', 'routeShortcutVariableInputs', routeShortcutVariableInputs)
            const localVarPath = `/api/v1/shortcuts/route`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(routeShortcutVariableInputs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Best route from a token to nontokenized position
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {string} positionOut Ethereum address of the position to receive
         * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
         * @param {string} receiver Ethereum address of the receiver of the positionOut
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {RouteNontokenizedShorcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
         * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
         * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeNontokenizedShorcutTransaction: async (fromAddress: string, tokenIn: Array<string>, positionOut: string, amountIn: Array<string>, receiver: string, chainId?: number, routingStrategy?: RouteNontokenizedShorcutTransactionRoutingStrategyEnum, referralCode?: string, slippage?: string, fee?: Array<string>, feeReceiver?: string, spender?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAddress' is not null or undefined
            assertParamExists('routeNontokenizedShorcutTransaction', 'fromAddress', fromAddress)
            // verify required parameter 'tokenIn' is not null or undefined
            assertParamExists('routeNontokenizedShorcutTransaction', 'tokenIn', tokenIn)
            // verify required parameter 'positionOut' is not null or undefined
            assertParamExists('routeNontokenizedShorcutTransaction', 'positionOut', positionOut)
            // verify required parameter 'amountIn' is not null or undefined
            assertParamExists('routeNontokenizedShorcutTransaction', 'amountIn', amountIn)
            // verify required parameter 'receiver' is not null or undefined
            assertParamExists('routeNontokenizedShorcutTransaction', 'receiver', receiver)
            const localVarPath = `/api/v1/shortcuts/route/nontokenized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (fromAddress !== undefined) {
                localVarQueryParameter['fromAddress'] = fromAddress;
            }

            if (routingStrategy !== undefined) {
                localVarQueryParameter['routingStrategy'] = routingStrategy;
            }

            if (referralCode !== undefined) {
                localVarQueryParameter['referralCode'] = referralCode;
            }

            if (tokenIn) {
                localVarQueryParameter['tokenIn'] = tokenIn;
            }

            if (positionOut !== undefined) {
                localVarQueryParameter['positionOut'] = positionOut;
            }

            if (slippage !== undefined) {
                localVarQueryParameter['slippage'] = slippage;
            }

            if (fee) {
                localVarQueryParameter['fee'] = fee;
            }

            if (feeReceiver !== undefined) {
                localVarQueryParameter['feeReceiver'] = feeReceiver;
            }

            if (amountIn) {
                localVarQueryParameter['amountIn'] = amountIn;
            }

            if (receiver !== undefined) {
                localVarQueryParameter['receiver'] = receiver;
            }

            if (spender !== undefined) {
                localVarQueryParameter['spender'] = spender;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Best route from a token to another
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
         * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {Array<string>} tokenOut Ethereum address of the token to swap to. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {RouteShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {boolean | null} [toEoa] Flag that indicates if gained tokenOut should be sent to EOA
         * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {Array<string>} [minAmountOut] Minimum amount out in wei. If specified, slippage should not be specified
         * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
         * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
         * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
         * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
         * @param {Array<string> | null} [ignoreStandards] A list of standards to be ignored from consideration
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {number} [destinationChainId] Chain ID of the network to bridge to and receive tokenOut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeShortcutTransaction: async (fromAddress: string, amountIn: Array<string>, tokenIn: Array<string>, tokenOut: Array<string>, chainId?: number, routingStrategy?: RouteShortcutTransactionRoutingStrategyEnum, toEoa?: boolean | null, receiver?: string, spender?: string, minAmountOut?: Array<string>, slippage?: string, fee?: Array<string>, feeReceiver?: string, ignoreAggregators?: Array<string> | null, ignoreStandards?: Array<string> | null, referralCode?: string, destinationChainId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAddress' is not null or undefined
            assertParamExists('routeShortcutTransaction', 'fromAddress', fromAddress)
            // verify required parameter 'amountIn' is not null or undefined
            assertParamExists('routeShortcutTransaction', 'amountIn', amountIn)
            // verify required parameter 'tokenIn' is not null or undefined
            assertParamExists('routeShortcutTransaction', 'tokenIn', tokenIn)
            // verify required parameter 'tokenOut' is not null or undefined
            assertParamExists('routeShortcutTransaction', 'tokenOut', tokenOut)
            const localVarPath = `/api/v1/shortcuts/route`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (fromAddress !== undefined) {
                localVarQueryParameter['fromAddress'] = fromAddress;
            }

            if (routingStrategy !== undefined) {
                localVarQueryParameter['routingStrategy'] = routingStrategy;
            }

            if (toEoa !== undefined) {
                localVarQueryParameter['toEoa'] = toEoa;
            }

            if (receiver !== undefined) {
                localVarQueryParameter['receiver'] = receiver;
            }

            if (spender !== undefined) {
                localVarQueryParameter['spender'] = spender;
            }

            if (amountIn) {
                localVarQueryParameter['amountIn'] = amountIn;
            }

            if (minAmountOut) {
                localVarQueryParameter['minAmountOut'] = minAmountOut;
            }

            if (slippage !== undefined) {
                localVarQueryParameter['slippage'] = slippage;
            }

            if (fee) {
                localVarQueryParameter['fee'] = fee;
            }

            if (feeReceiver !== undefined) {
                localVarQueryParameter['feeReceiver'] = feeReceiver;
            }

            if (ignoreAggregators) {
                localVarQueryParameter['ignoreAggregators'] = ignoreAggregators;
            }

            if (ignoreStandards) {
                localVarQueryParameter['ignoreStandards'] = ignoreStandards;
            }

            if (referralCode !== undefined) {
                localVarQueryParameter['referralCode'] = referralCode;
            }

            if (tokenIn) {
                localVarQueryParameter['tokenIn'] = tokenIn;
            }

            if (tokenOut) {
                localVarQueryParameter['tokenOut'] = tokenOut;
            }

            if (destinationChainId !== undefined) {
                localVarQueryParameter['destinationChainId'] = destinationChainId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShortcutsApi - functional programming interface
 * @export
 */
export const ShortcutsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShortcutsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bundle a list of actions into a single tx
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<ActionToBundle>} actionToBundle 
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {BundleShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bundleShortcutTransaction(fromAddress: string, actionToBundle: Array<ActionToBundle>, chainId?: number, referralCode?: string, routingStrategy?: BundleShortcutTransactionRoutingStrategyEnum, receiver?: string, spender?: string, ignoreAggregators?: Array<string> | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BundleShortcutTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bundleShortcutTransaction(fromAddress, actionToBundle, chainId, referralCode, routingStrategy, receiver, spender, ignoreAggregators, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShortcutsApi.bundleShortcutTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get transaction for IPOR shortcut
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {IporShortcutInput} iporShortcutInput 
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iporShortcutTransaction(fromAddress: string, iporShortcutInput: IporShortcutInput, chainId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IporShortcutTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iporShortcutTransaction(fromAddress, iporShortcutInput, chainId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShortcutsApi.iporShortcutTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Best route from a token to another
         * @param {RouteShortcutVariableInputs} routeShortcutVariableInputs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRouteShortcutTransaction(routeShortcutVariableInputs: RouteShortcutVariableInputs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteShortcutTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRouteShortcutTransaction(routeShortcutVariableInputs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShortcutsApi.postRouteShortcutTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Best route from a token to nontokenized position
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {string} positionOut Ethereum address of the position to receive
         * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
         * @param {string} receiver Ethereum address of the receiver of the positionOut
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {RouteNontokenizedShorcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
         * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
         * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeNontokenizedShorcutTransaction(fromAddress: string, tokenIn: Array<string>, positionOut: string, amountIn: Array<string>, receiver: string, chainId?: number, routingStrategy?: RouteNontokenizedShorcutTransactionRoutingStrategyEnum, referralCode?: string, slippage?: string, fee?: Array<string>, feeReceiver?: string, spender?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteShortcutTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeNontokenizedShorcutTransaction(fromAddress, tokenIn, positionOut, amountIn, receiver, chainId, routingStrategy, referralCode, slippage, fee, feeReceiver, spender, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShortcutsApi.routeNontokenizedShorcutTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Best route from a token to another
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
         * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {Array<string>} tokenOut Ethereum address of the token to swap to. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {RouteShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {boolean | null} [toEoa] Flag that indicates if gained tokenOut should be sent to EOA
         * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {Array<string>} [minAmountOut] Minimum amount out in wei. If specified, slippage should not be specified
         * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
         * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
         * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
         * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
         * @param {Array<string> | null} [ignoreStandards] A list of standards to be ignored from consideration
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {number} [destinationChainId] Chain ID of the network to bridge to and receive tokenOut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeShortcutTransaction(fromAddress: string, amountIn: Array<string>, tokenIn: Array<string>, tokenOut: Array<string>, chainId?: number, routingStrategy?: RouteShortcutTransactionRoutingStrategyEnum, toEoa?: boolean | null, receiver?: string, spender?: string, minAmountOut?: Array<string>, slippage?: string, fee?: Array<string>, feeReceiver?: string, ignoreAggregators?: Array<string> | null, ignoreStandards?: Array<string> | null, referralCode?: string, destinationChainId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteShortcutTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeShortcutTransaction(fromAddress, amountIn, tokenIn, tokenOut, chainId, routingStrategy, toEoa, receiver, spender, minAmountOut, slippage, fee, feeReceiver, ignoreAggregators, ignoreStandards, referralCode, destinationChainId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShortcutsApi.routeShortcutTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShortcutsApi - factory interface
 * @export
 */
export const ShortcutsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShortcutsApiFp(configuration)
    return {
        /**
         * 
         * @summary Bundle a list of actions into a single tx
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<ActionToBundle>} actionToBundle 
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {BundleShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bundleShortcutTransaction(fromAddress: string, actionToBundle: Array<ActionToBundle>, chainId?: number, referralCode?: string, routingStrategy?: BundleShortcutTransactionRoutingStrategyEnum, receiver?: string, spender?: string, ignoreAggregators?: Array<string> | null, options?: RawAxiosRequestConfig): AxiosPromise<BundleShortcutTransaction> {
            return localVarFp.bundleShortcutTransaction(fromAddress, actionToBundle, chainId, referralCode, routingStrategy, receiver, spender, ignoreAggregators, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get transaction for IPOR shortcut
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {IporShortcutInput} iporShortcutInput 
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iporShortcutTransaction(fromAddress: string, iporShortcutInput: IporShortcutInput, chainId?: number, options?: RawAxiosRequestConfig): AxiosPromise<IporShortcutTransaction> {
            return localVarFp.iporShortcutTransaction(fromAddress, iporShortcutInput, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Best route from a token to another
         * @param {RouteShortcutVariableInputs} routeShortcutVariableInputs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRouteShortcutTransaction(routeShortcutVariableInputs: RouteShortcutVariableInputs, options?: RawAxiosRequestConfig): AxiosPromise<RouteShortcutTransaction> {
            return localVarFp.postRouteShortcutTransaction(routeShortcutVariableInputs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Best route from a token to nontokenized position
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {string} positionOut Ethereum address of the position to receive
         * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
         * @param {string} receiver Ethereum address of the receiver of the positionOut
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {RouteNontokenizedShorcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
         * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
         * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeNontokenizedShorcutTransaction(fromAddress: string, tokenIn: Array<string>, positionOut: string, amountIn: Array<string>, receiver: string, chainId?: number, routingStrategy?: RouteNontokenizedShorcutTransactionRoutingStrategyEnum, referralCode?: string, slippage?: string, fee?: Array<string>, feeReceiver?: string, spender?: string, options?: RawAxiosRequestConfig): AxiosPromise<RouteShortcutTransaction> {
            return localVarFp.routeNontokenizedShorcutTransaction(fromAddress, tokenIn, positionOut, amountIn, receiver, chainId, routingStrategy, referralCode, slippage, fee, feeReceiver, spender, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Best route from a token to another
         * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
         * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
         * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {Array<string>} tokenOut Ethereum address of the token to swap to. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
         * @param {number} [chainId] Chain ID of the network to execute the transaction on
         * @param {RouteShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
         * @param {boolean | null} [toEoa] Flag that indicates if gained tokenOut should be sent to EOA
         * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
         * @param {string} [spender] Ethereum address of the spender of the tokenIn
         * @param {Array<string>} [minAmountOut] Minimum amount out in wei. If specified, slippage should not be specified
         * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
         * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
         * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
         * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
         * @param {Array<string> | null} [ignoreStandards] A list of standards to be ignored from consideration
         * @param {string} [referralCode] Referral code that will be included in an on-chain event.
         * @param {number} [destinationChainId] Chain ID of the network to bridge to and receive tokenOut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeShortcutTransaction(fromAddress: string, amountIn: Array<string>, tokenIn: Array<string>, tokenOut: Array<string>, chainId?: number, routingStrategy?: RouteShortcutTransactionRoutingStrategyEnum, toEoa?: boolean | null, receiver?: string, spender?: string, minAmountOut?: Array<string>, slippage?: string, fee?: Array<string>, feeReceiver?: string, ignoreAggregators?: Array<string> | null, ignoreStandards?: Array<string> | null, referralCode?: string, destinationChainId?: number, options?: RawAxiosRequestConfig): AxiosPromise<RouteShortcutTransaction> {
            return localVarFp.routeShortcutTransaction(fromAddress, amountIn, tokenIn, tokenOut, chainId, routingStrategy, toEoa, receiver, spender, minAmountOut, slippage, fee, feeReceiver, ignoreAggregators, ignoreStandards, referralCode, destinationChainId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShortcutsApi - object-oriented interface
 * @export
 * @class ShortcutsApi
 * @extends {BaseAPI}
 */
export class ShortcutsApi extends BaseAPI {
    /**
     * 
     * @summary Bundle a list of actions into a single tx
     * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
     * @param {Array<ActionToBundle>} actionToBundle 
     * @param {number} [chainId] Chain ID of the network to execute the transaction on
     * @param {string} [referralCode] Referral code that will be included in an on-chain event.
     * @param {BundleShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
     * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
     * @param {string} [spender] Ethereum address of the spender of the tokenIn
     * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortcutsApi
     */
    public bundleShortcutTransaction(fromAddress: string, actionToBundle: Array<ActionToBundle>, chainId?: number, referralCode?: string, routingStrategy?: BundleShortcutTransactionRoutingStrategyEnum, receiver?: string, spender?: string, ignoreAggregators?: Array<string> | null, options?: RawAxiosRequestConfig) {
        return ShortcutsApiFp(this.configuration).bundleShortcutTransaction(fromAddress, actionToBundle, chainId, referralCode, routingStrategy, receiver, spender, ignoreAggregators, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get transaction for IPOR shortcut
     * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
     * @param {IporShortcutInput} iporShortcutInput 
     * @param {number} [chainId] Chain ID of the network to execute the transaction on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortcutsApi
     */
    public iporShortcutTransaction(fromAddress: string, iporShortcutInput: IporShortcutInput, chainId?: number, options?: RawAxiosRequestConfig) {
        return ShortcutsApiFp(this.configuration).iporShortcutTransaction(fromAddress, iporShortcutInput, chainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Best route from a token to another
     * @param {RouteShortcutVariableInputs} routeShortcutVariableInputs 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortcutsApi
     */
    public postRouteShortcutTransaction(routeShortcutVariableInputs: RouteShortcutVariableInputs, options?: RawAxiosRequestConfig) {
        return ShortcutsApiFp(this.configuration).postRouteShortcutTransaction(routeShortcutVariableInputs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Best route from a token to nontokenized position
     * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
     * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
     * @param {string} positionOut Ethereum address of the position to receive
     * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
     * @param {string} receiver Ethereum address of the receiver of the positionOut
     * @param {number} [chainId] Chain ID of the network to execute the transaction on
     * @param {RouteNontokenizedShorcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
     * @param {string} [referralCode] Referral code that will be included in an on-chain event.
     * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
     * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
     * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
     * @param {string} [spender] Ethereum address of the spender of the tokenIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortcutsApi
     */
    public routeNontokenizedShorcutTransaction(fromAddress: string, tokenIn: Array<string>, positionOut: string, amountIn: Array<string>, receiver: string, chainId?: number, routingStrategy?: RouteNontokenizedShorcutTransactionRoutingStrategyEnum, referralCode?: string, slippage?: string, fee?: Array<string>, feeReceiver?: string, spender?: string, options?: RawAxiosRequestConfig) {
        return ShortcutsApiFp(this.configuration).routeNontokenizedShorcutTransaction(fromAddress, tokenIn, positionOut, amountIn, receiver, chainId, routingStrategy, referralCode, slippage, fee, feeReceiver, spender, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Best route from a token to another
     * @param {string} fromAddress Ethereum address of the wallet to send the transaction from
     * @param {Array<string>} amountIn Amount of tokenIn to swap in wei
     * @param {Array<string>} tokenIn Ethereum address of the token to swap from. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
     * @param {Array<string>} tokenOut Ethereum address of the token to swap to. For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
     * @param {number} [chainId] Chain ID of the network to execute the transaction on
     * @param {RouteShortcutTransactionRoutingStrategyEnum} [routingStrategy] Routing strategy to use
     * @param {boolean | null} [toEoa] Flag that indicates if gained tokenOut should be sent to EOA
     * @param {string} [receiver] Ethereum address of the receiver of the tokenOut
     * @param {string} [spender] Ethereum address of the spender of the tokenIn
     * @param {Array<string>} [minAmountOut] Minimum amount out in wei. If specified, slippage should not be specified
     * @param {string} [slippage] Slippage in basis points (1/10000). If specified, minAmountOut should not be specified
     * @param {Array<string>} [fee] Fee in basis points (1/10000) for each amountIn value. Must be in range 0-100. If specified, this percentage of each amountIn value will be sent to feeReceiver
     * @param {string} [feeReceiver] The Ethereum address that will receive the collected fee. Required if fee is provided
     * @param {Array<string> | null} [ignoreAggregators] A list of swap aggregators to be ignored from consideration
     * @param {Array<string> | null} [ignoreStandards] A list of standards to be ignored from consideration
     * @param {string} [referralCode] Referral code that will be included in an on-chain event.
     * @param {number} [destinationChainId] Chain ID of the network to bridge to and receive tokenOut
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShortcutsApi
     */
    public routeShortcutTransaction(fromAddress: string, amountIn: Array<string>, tokenIn: Array<string>, tokenOut: Array<string>, chainId?: number, routingStrategy?: RouteShortcutTransactionRoutingStrategyEnum, toEoa?: boolean | null, receiver?: string, spender?: string, minAmountOut?: Array<string>, slippage?: string, fee?: Array<string>, feeReceiver?: string, ignoreAggregators?: Array<string> | null, ignoreStandards?: Array<string> | null, referralCode?: string, destinationChainId?: number, options?: RawAxiosRequestConfig) {
        return ShortcutsApiFp(this.configuration).routeShortcutTransaction(fromAddress, amountIn, tokenIn, tokenOut, chainId, routingStrategy, toEoa, receiver, spender, minAmountOut, slippage, fee, feeReceiver, ignoreAggregators, ignoreStandards, referralCode, destinationChainId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const BundleShortcutTransactionRoutingStrategyEnum = {
    Delegate: 'delegate',
    Router: 'router'
} as const;
export type BundleShortcutTransactionRoutingStrategyEnum = typeof BundleShortcutTransactionRoutingStrategyEnum[keyof typeof BundleShortcutTransactionRoutingStrategyEnum];
/**
 * @export
 */
export const RouteNontokenizedShorcutTransactionRoutingStrategyEnum = {
    Delegate: 'delegate',
    DelegateLegacy: 'delegate-legacy'
} as const;
export type RouteNontokenizedShorcutTransactionRoutingStrategyEnum = typeof RouteNontokenizedShorcutTransactionRoutingStrategyEnum[keyof typeof RouteNontokenizedShorcutTransactionRoutingStrategyEnum];
/**
 * @export
 */
export const RouteShortcutTransactionRoutingStrategyEnum = {
    Ensowallet: 'ensowallet',
    Router: 'router',
    Delegate: 'delegate',
    RouterLegacy: 'router-legacy',
    DelegateLegacy: 'delegate-legacy'
} as const;
export type RouteShortcutTransactionRoutingStrategyEnum = typeof RouteShortcutTransactionRoutingStrategyEnum[keyof typeof RouteShortcutTransactionRoutingStrategyEnum];
