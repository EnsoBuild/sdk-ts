/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActionToBundle,
  BundleShortcutTransaction,
  IporShortcutInput,
  IporShortcutTransaction,
  RouteShortcutTransaction,
  RouteShortcutVariableInputs,
} from '../models/index';
import {
    ActionToBundleFromJSON,
    ActionToBundleToJSON,
    BundleShortcutTransactionFromJSON,
    BundleShortcutTransactionToJSON,
    IporShortcutInputFromJSON,
    IporShortcutInputToJSON,
    IporShortcutTransactionFromJSON,
    IporShortcutTransactionToJSON,
    RouteShortcutTransactionFromJSON,
    RouteShortcutTransactionToJSON,
    RouteShortcutVariableInputsFromJSON,
    RouteShortcutVariableInputsToJSON,
} from '../models/index';

export interface BundleControllerBundleShortcutTransactionRequest {
    fromAddress: string;
    actionToBundle: Array<ActionToBundle>;
    chainId?: number;
    referralCode?: string;
    routingStrategy?: BundleControllerBundleShortcutTransactionRoutingStrategyEnum;
    receiver?: string;
    spender?: string;
    ignoreAggregators?: Array<string> | null;
}

export interface IporControllerIporShortcutTransactionRequest {
    fromAddress: string;
    iporShortcutInput: IporShortcutInput;
    chainId?: number;
}

export interface NontokenizedControllerRouteNontokenizedShorcutTransactionRequest {
    fromAddress: string;
    tokenIn: Array<string>;
    positionOut: string;
    amountIn: Array<string>;
    receiver: string;
    chainId?: number;
    routingStrategy?: NontokenizedControllerRouteNontokenizedShorcutTransactionRoutingStrategyEnum;
    referralCode?: string;
    slippage?: string;
    fee?: Array<string>;
    feeReceiver?: string;
    spender?: string;
}

export interface RouterControllerPostRouteShortcutTransactionRequest {
    routeShortcutVariableInputs: RouteShortcutVariableInputs;
}

export interface RouterControllerRouteShortcutTransactionRequest {
    fromAddress: string;
    amountIn: Array<string>;
    tokenIn: Array<string>;
    tokenOut: Array<string>;
    chainId?: number;
    routingStrategy?: RouterControllerRouteShortcutTransactionRoutingStrategyEnum;
    toEoa?: boolean | null;
    receiver?: string;
    spender?: string;
    minAmountOut?: Array<string>;
    slippage?: string;
    fee?: Array<string>;
    feeReceiver?: string;
    ignoreAggregators?: Array<string> | null;
    ignoreStandards?: Array<string> | null;
    referralCode?: string;
    destinationChainId?: number;
}

/**
 * 
 */
export class ShortcutsApi extends runtime.BaseAPI {

    /**
     * Bundle a list of actions into a single tx
     */
    async bundleControllerBundleShortcutTransactionRaw(requestParameters: BundleControllerBundleShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundleShortcutTransaction>> {
        if (requestParameters['fromAddress'] == null) {
            throw new runtime.RequiredError(
                'fromAddress',
                'Required parameter "fromAddress" was null or undefined when calling bundleControllerBundleShortcutTransaction().'
            );
        }

        if (requestParameters['actionToBundle'] == null) {
            throw new runtime.RequiredError(
                'actionToBundle',
                'Required parameter "actionToBundle" was null or undefined when calling bundleControllerBundleShortcutTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['fromAddress'] != null) {
            queryParameters['fromAddress'] = requestParameters['fromAddress'];
        }

        if (requestParameters['referralCode'] != null) {
            queryParameters['referralCode'] = requestParameters['referralCode'];
        }

        if (requestParameters['routingStrategy'] != null) {
            queryParameters['routingStrategy'] = requestParameters['routingStrategy'];
        }

        if (requestParameters['receiver'] != null) {
            queryParameters['receiver'] = requestParameters['receiver'];
        }

        if (requestParameters['spender'] != null) {
            queryParameters['spender'] = requestParameters['spender'];
        }

        if (requestParameters['ignoreAggregators'] != null) {
            queryParameters['ignoreAggregators'] = requestParameters['ignoreAggregators'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shortcuts/bundle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['actionToBundle']!.map(ActionToBundleToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleShortcutTransactionFromJSON(jsonValue));
    }

    /**
     * Bundle a list of actions into a single tx
     */
    async bundleControllerBundleShortcutTransaction(requestParameters: BundleControllerBundleShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundleShortcutTransaction> {
        const response = await this.bundleControllerBundleShortcutTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transaction for IPOR shortcut
     */
    async iporControllerIporShortcutTransactionRaw(requestParameters: IporControllerIporShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IporShortcutTransaction>> {
        if (requestParameters['fromAddress'] == null) {
            throw new runtime.RequiredError(
                'fromAddress',
                'Required parameter "fromAddress" was null or undefined when calling iporControllerIporShortcutTransaction().'
            );
        }

        if (requestParameters['iporShortcutInput'] == null) {
            throw new runtime.RequiredError(
                'iporShortcutInput',
                'Required parameter "iporShortcutInput" was null or undefined when calling iporControllerIporShortcutTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['fromAddress'] != null) {
            queryParameters['fromAddress'] = requestParameters['fromAddress'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shortcuts/static/ipor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IporShortcutInputToJSON(requestParameters['iporShortcutInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IporShortcutTransactionFromJSON(jsonValue));
    }

    /**
     * Get transaction for IPOR shortcut
     */
    async iporControllerIporShortcutTransaction(requestParameters: IporControllerIporShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IporShortcutTransaction> {
        const response = await this.iporControllerIporShortcutTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Best route from a token to nontokenized position
     */
    async nontokenizedControllerRouteNontokenizedShorcutTransactionRaw(requestParameters: NontokenizedControllerRouteNontokenizedShorcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteShortcutTransaction>> {
        if (requestParameters['fromAddress'] == null) {
            throw new runtime.RequiredError(
                'fromAddress',
                'Required parameter "fromAddress" was null or undefined when calling nontokenizedControllerRouteNontokenizedShorcutTransaction().'
            );
        }

        if (requestParameters['tokenIn'] == null) {
            throw new runtime.RequiredError(
                'tokenIn',
                'Required parameter "tokenIn" was null or undefined when calling nontokenizedControllerRouteNontokenizedShorcutTransaction().'
            );
        }

        if (requestParameters['positionOut'] == null) {
            throw new runtime.RequiredError(
                'positionOut',
                'Required parameter "positionOut" was null or undefined when calling nontokenizedControllerRouteNontokenizedShorcutTransaction().'
            );
        }

        if (requestParameters['amountIn'] == null) {
            throw new runtime.RequiredError(
                'amountIn',
                'Required parameter "amountIn" was null or undefined when calling nontokenizedControllerRouteNontokenizedShorcutTransaction().'
            );
        }

        if (requestParameters['receiver'] == null) {
            throw new runtime.RequiredError(
                'receiver',
                'Required parameter "receiver" was null or undefined when calling nontokenizedControllerRouteNontokenizedShorcutTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['fromAddress'] != null) {
            queryParameters['fromAddress'] = requestParameters['fromAddress'];
        }

        if (requestParameters['routingStrategy'] != null) {
            queryParameters['routingStrategy'] = requestParameters['routingStrategy'];
        }

        if (requestParameters['referralCode'] != null) {
            queryParameters['referralCode'] = requestParameters['referralCode'];
        }

        if (requestParameters['tokenIn'] != null) {
            queryParameters['tokenIn'] = requestParameters['tokenIn'];
        }

        if (requestParameters['positionOut'] != null) {
            queryParameters['positionOut'] = requestParameters['positionOut'];
        }

        if (requestParameters['slippage'] != null) {
            queryParameters['slippage'] = requestParameters['slippage'];
        }

        if (requestParameters['fee'] != null) {
            queryParameters['fee'] = requestParameters['fee'];
        }

        if (requestParameters['feeReceiver'] != null) {
            queryParameters['feeReceiver'] = requestParameters['feeReceiver'];
        }

        if (requestParameters['amountIn'] != null) {
            queryParameters['amountIn'] = requestParameters['amountIn'];
        }

        if (requestParameters['receiver'] != null) {
            queryParameters['receiver'] = requestParameters['receiver'];
        }

        if (requestParameters['spender'] != null) {
            queryParameters['spender'] = requestParameters['spender'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shortcuts/route/nontokenized`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteShortcutTransactionFromJSON(jsonValue));
    }

    /**
     * Best route from a token to nontokenized position
     */
    async nontokenizedControllerRouteNontokenizedShorcutTransaction(requestParameters: NontokenizedControllerRouteNontokenizedShorcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteShortcutTransaction> {
        const response = await this.nontokenizedControllerRouteNontokenizedShorcutTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Best route from a token to another
     */
    async routerControllerPostRouteShortcutTransactionRaw(requestParameters: RouterControllerPostRouteShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteShortcutTransaction>> {
        if (requestParameters['routeShortcutVariableInputs'] == null) {
            throw new runtime.RequiredError(
                'routeShortcutVariableInputs',
                'Required parameter "routeShortcutVariableInputs" was null or undefined when calling routerControllerPostRouteShortcutTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shortcuts/route`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RouteShortcutVariableInputsToJSON(requestParameters['routeShortcutVariableInputs']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteShortcutTransactionFromJSON(jsonValue));
    }

    /**
     * Best route from a token to another
     */
    async routerControllerPostRouteShortcutTransaction(requestParameters: RouterControllerPostRouteShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteShortcutTransaction> {
        const response = await this.routerControllerPostRouteShortcutTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Best route from a token to another
     */
    async routerControllerRouteShortcutTransactionRaw(requestParameters: RouterControllerRouteShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RouteShortcutTransaction>> {
        if (requestParameters['fromAddress'] == null) {
            throw new runtime.RequiredError(
                'fromAddress',
                'Required parameter "fromAddress" was null or undefined when calling routerControllerRouteShortcutTransaction().'
            );
        }

        if (requestParameters['amountIn'] == null) {
            throw new runtime.RequiredError(
                'amountIn',
                'Required parameter "amountIn" was null or undefined when calling routerControllerRouteShortcutTransaction().'
            );
        }

        if (requestParameters['tokenIn'] == null) {
            throw new runtime.RequiredError(
                'tokenIn',
                'Required parameter "tokenIn" was null or undefined when calling routerControllerRouteShortcutTransaction().'
            );
        }

        if (requestParameters['tokenOut'] == null) {
            throw new runtime.RequiredError(
                'tokenOut',
                'Required parameter "tokenOut" was null or undefined when calling routerControllerRouteShortcutTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['fromAddress'] != null) {
            queryParameters['fromAddress'] = requestParameters['fromAddress'];
        }

        if (requestParameters['routingStrategy'] != null) {
            queryParameters['routingStrategy'] = requestParameters['routingStrategy'];
        }

        if (requestParameters['toEoa'] != null) {
            queryParameters['toEoa'] = requestParameters['toEoa'];
        }

        if (requestParameters['receiver'] != null) {
            queryParameters['receiver'] = requestParameters['receiver'];
        }

        if (requestParameters['spender'] != null) {
            queryParameters['spender'] = requestParameters['spender'];
        }

        if (requestParameters['amountIn'] != null) {
            queryParameters['amountIn'] = requestParameters['amountIn'];
        }

        if (requestParameters['minAmountOut'] != null) {
            queryParameters['minAmountOut'] = requestParameters['minAmountOut'];
        }

        if (requestParameters['slippage'] != null) {
            queryParameters['slippage'] = requestParameters['slippage'];
        }

        if (requestParameters['fee'] != null) {
            queryParameters['fee'] = requestParameters['fee'];
        }

        if (requestParameters['feeReceiver'] != null) {
            queryParameters['feeReceiver'] = requestParameters['feeReceiver'];
        }

        if (requestParameters['ignoreAggregators'] != null) {
            queryParameters['ignoreAggregators'] = requestParameters['ignoreAggregators'];
        }

        if (requestParameters['ignoreStandards'] != null) {
            queryParameters['ignoreStandards'] = requestParameters['ignoreStandards'];
        }

        if (requestParameters['referralCode'] != null) {
            queryParameters['referralCode'] = requestParameters['referralCode'];
        }

        if (requestParameters['tokenIn'] != null) {
            queryParameters['tokenIn'] = requestParameters['tokenIn'];
        }

        if (requestParameters['tokenOut'] != null) {
            queryParameters['tokenOut'] = requestParameters['tokenOut'];
        }

        if (requestParameters['destinationChainId'] != null) {
            queryParameters['destinationChainId'] = requestParameters['destinationChainId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shortcuts/route`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteShortcutTransactionFromJSON(jsonValue));
    }

    /**
     * Best route from a token to another
     */
    async routerControllerRouteShortcutTransaction(requestParameters: RouterControllerRouteShortcutTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RouteShortcutTransaction> {
        const response = await this.routerControllerRouteShortcutTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BundleControllerBundleShortcutTransactionRoutingStrategyEnum = {
    Delegate: 'delegate',
    Router: 'router'
} as const;
export type BundleControllerBundleShortcutTransactionRoutingStrategyEnum = typeof BundleControllerBundleShortcutTransactionRoutingStrategyEnum[keyof typeof BundleControllerBundleShortcutTransactionRoutingStrategyEnum];
/**
 * @export
 */
export const NontokenizedControllerRouteNontokenizedShorcutTransactionRoutingStrategyEnum = {
    Delegate: 'delegate',
    DelegateLegacy: 'delegate-legacy'
} as const;
export type NontokenizedControllerRouteNontokenizedShorcutTransactionRoutingStrategyEnum = typeof NontokenizedControllerRouteNontokenizedShorcutTransactionRoutingStrategyEnum[keyof typeof NontokenizedControllerRouteNontokenizedShorcutTransactionRoutingStrategyEnum];
/**
 * @export
 */
export const RouterControllerRouteShortcutTransactionRoutingStrategyEnum = {
    Ensowallet: 'ensowallet',
    Router: 'router',
    Delegate: 'delegate',
    RouterLegacy: 'router-legacy',
    DelegateLegacy: 'delegate-legacy'
} as const;
export type RouterControllerRouteShortcutTransactionRoutingStrategyEnum = typeof RouterControllerRouteShortcutTransactionRoutingStrategyEnum[keyof typeof RouterControllerRouteShortcutTransactionRoutingStrategyEnum];
