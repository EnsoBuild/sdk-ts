/* tslint:disable */
/* eslint-disable */
/**
 * 
 * #### Enso API - Find detailed documentation on [docs.enso.finance](https://docs.enso.finance). - To use the API, **you must include your API Key in the Authorization header** (Bearer format). - For testing, Swagger pre-authorizes you using the key: `1e02632d-6feb-4a75-a157-documentation` (1rps). - Get your own API Key at [enso.finance/developers](https://enso.finance/developers).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Action,
  ProtocolModel,
  Standard,
} from '../models/index';
import {
    ActionFromJSON,
    ActionToJSON,
    ProtocolModelFromJSON,
    ProtocolModelToJSON,
    StandardFromJSON,
    StandardToJSON,
} from '../models/index';

export interface ActionsControllerGetActionsBySlugRequest {
    slug: string;
}

export interface StandardsControllerGetProtocolBySlugRequest {
    slug: string;
}

/**
 * 
 */
export class StandardsApi extends runtime.BaseAPI {

    /**
     * Returns actions available to use in bundle shortcuts
     */
    async actionsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Action>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/actions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActionFromJSON));
    }

    /**
     * Returns actions available to use in bundle shortcuts
     */
    async actionsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Action>> {
        const response = await this.actionsControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns actions available to use in bundle shortcuts for a given protocol
     */
    async actionsControllerGetActionsBySlugRaw(requestParameters: ActionsControllerGetActionsBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Action>>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling actionsControllerGetActionsBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/actions/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActionFromJSON));
    }

    /**
     * Returns actions available to use in bundle shortcuts for a given protocol
     */
    async actionsControllerGetActionsBySlug(requestParameters: ActionsControllerGetActionsBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Action>> {
        const response = await this.actionsControllerGetActionsBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a standard by slug
     */
    async standardsControllerGetProtocolBySlugRaw(requestParameters: StandardsControllerGetProtocolBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProtocolModel>>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling standardsControllerGetProtocolBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/standards/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProtocolModelFromJSON));
    }

    /**
     * Returns a standard by slug
     */
    async standardsControllerGetProtocolBySlug(requestParameters: StandardsControllerGetProtocolBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProtocolModel>> {
        const response = await this.standardsControllerGetProtocolBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns standards and methods available to use in bundle shortcuts
     */
    async standardsControllerStandardsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Standard>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/standards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StandardFromJSON));
    }

    /**
     * Returns standards and methods available to use in bundle shortcuts
     */
    async standardsControllerStandards(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Standard>> {
        const response = await this.standardsControllerStandardsRaw(initOverrides);
        return await response.value();
    }

}
